import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.figure_factory as ff
import openai

# -------------------------------------------------------------------
# CONFIGURATION DE LA PAGE STREAMLIT
# -------------------------------------------------------------------
st.set_page_config(
    page_title="Tableau de Bord d'Analyse de Similarit√©",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# -------------------------------------------------------------------
# CSS PERSONNALIS√â POUR LE STYLE
# -------------------------------------------------------------------
st.markdown("""
<style>
    .main > div {
        padding-top: 2rem;
    }
    .stMetric {
        background-color: #f0f2f6;
        border: 1px solid #e1e5e9;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .highlight-box {
        background-color: #e8f4f8;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# -------------------------------------------------------------------
# CHARGEMENT DES DONN√âES
# -------------------------------------------------------------------
@st.cache_data
def charger_donnees():
    """Charger et pr√©traiter les donn√©es de similarit√©"""
    try:
        df =pd.read_excel(r"project_level_similarity_mixed.xlsx")
        return df
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es : {e}")
        return None

# -------------------------------------------------------------------
# FONCTION DE CR√âATION DES GRAPHIQUES DE DISTRIBUTION
# -------------------------------------------------------------------
def creer_graphique_distribution(df, seuil_tfidf, seuil_bert):
    """Cr√©er des graphiques de distribution pour les deux m√©thodes de similarit√©"""
    # Filtrer les donn√©es selon les seuils
    df_filtre = df[
        (df['tfidf_score'] >= seuil_tfidf) & 
        (df['bert_score'] >= seuil_bert)
    ]
    
    # Cr√©er des sous-graphiques
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=(
            'Distribution des scores TF-IDF', 
            'Distribution des scores BERT', 
            'TF-IDF vs BERT', 
            'Bo√Ætes √† moustaches'
        ),
        specs=[
            [{"secondary_y": False}, {"secondary_y": False}],
            [{"secondary_y": False}, {"secondary_y": False}]
        ]
    )
    
    # Histogramme TF-IDF
    fig.add_trace(
        go.Histogram(
            x=df_filtre['tfidf_score'], 
            name='TF-IDF', 
            opacity=0.7,
            nbinsx=50,
            marker_color='#1f77b4'
        ),
        row=1, col=1
    )
    
    # Histogramme BERT
    fig.add_trace(
        go.Histogram(
            x=df_filtre['bert_score'], 
            name='BERT', 
            opacity=0.7,
            nbinsx=50,
            marker_color='#ff7f0e'
        ),
        row=1, col=2
    )
    
    # Nuage de points TF-IDF vs BERT
    fig.add_trace(
        go.Scatter(
            x=df_filtre['tfidf_score'], 
            y=df_filtre['bert_score'],
            mode='markers',
            name='Projets',
            marker=dict(size=4, opacity=0.6),
            text=df_filtre['acronyme_anr'] + ' - ' + df_filtre['acronyme_cordis'],
            hovertemplate='<b>%{text}</b><br>TF-IDF : %{x:.4f}<br>BERT : %{y:.4f}<extra></extra>'
        ),
        row=2, col=1
    )
    
    # Bo√Æte √† moustaches TF-IDF
    fig.add_trace(
        go.Box(
            y=df_filtre['tfidf_score'], 
            name='TF-IDF',
            marker_color='#1f77b4'
        ),
        row=2, col=2
    )
    
    # Bo√Æte √† moustaches BERT
    fig.add_trace(
        go.Box(
            y=df_filtre['bert_score'], 
            name='BERT',
            marker_color='#ff7f0e'
        ),
        row=2, col=2
    )
    
    # Mise √† jour de la mise en page
    fig.update_layout(
        height=800,
        showlegend=True,
        title_text="Analyse des Scores de Similarit√©",
        title_x=0.5
    )
    
    # √âtiquettes des axes
    fig.update_xaxes(title_text="Score TF-IDF", row=1, col=1)
    fig.update_xaxes(title_text="Score BERT", row=1, col=2)
    fig.update_xaxes(title_text="Score TF-IDF", row=2, col=1)
    fig.update_xaxes(title_text="M√©thodes", row=2, col=2)
    
    fig.update_yaxes(title_text="Fr√©quence", row=1, col=1)
    fig.update_yaxes(title_text="Fr√©quence", row=1, col=2)
    fig.update_yaxes(title_text="Score BERT", row=2, col=1)
    fig.update_yaxes(title_text="Valeur du Score", row=2, col=2)
    
    return fig, df_filtre

# -------------------------------------------------------------------
# FONCTION DE CR√âATION DU TABLEAU DES MEILLEURES CORRESPONDANCES
# -------------------------------------------------------------------
def creer_tableau_top(df, n_top=10):
    """Cr√©er un tableau des meilleures correspondances pour chaque m√©thode"""
    # Meilleures correspondances TF-IDF
    top_tfidf = df.nlargest(n_top, 'tfidf_score')[
        ['acronyme_anr', 'acronyme_cordis', 'tfidf_score', 'bert_score']
    ].copy()
    top_tfidf['rang'] = range(1, len(top_tfidf) + 1)
    
    # Meilleures correspondances BERT
    top_bert = df.nlargest(n_top, 'bert_score')[
        ['acronyme_anr', 'acronyme_cordis', 'tfidf_score', 'bert_score']
    ].copy()
    top_bert['rang'] = range(1, len(top_bert) + 1)
    
    return top_tfidf, top_bert

# -------------------------------------------------------------------
# FONCTION PRINCIPALE
# -------------------------------------------------------------------
def main():
    # Charger les donn√©es
    df = charger_donnees()
    if df is None:
        st.stop()
    
    # D√©finir les onglets
    onglet1, onglet2, onglet3= st.tabs(["üßÆ Analyse de Similarit√©","Donn√©es ","üí¨ Chat & Comparaison de R√©sum√©s"    ])
    
    # -------------------------------------------------------------------
    # ONGLET 1 : ANALYSE DE SIMILARIT√â
    # -------------------------------------------------------------------
    with onglet1:
        # Titre et description
        st.title("üî¨ Tableau de Bord d'Analyse de Similarit√© de Projets")
        st.markdown("""
        <div class="highlight-box">
        Ce tableau de bord analyse les scores de similarit√© entre les projets ANR 
        (Agence Nationale de la Recherche) et CORDIS (projets de recherche europ√©ens) 
        en utilisant deux m√©thodes : TF-IDF et BERT.
        Utilisez les contr√¥les dans la barre lat√©rale pour filtrer les donn√©es et explorer les diff√©rentes analyses.
        </div>
        """, unsafe_allow_html=True)
        
        # Contr√¥les dans la barre lat√©rale
        st.sidebar.header("üéõÔ∏è Contr√¥les")
        
        # Filtre des seuils
        st.sidebar.subheader("Filtres de Seuils")
        seuil_tfidf = st.sidebar.slider(
            "Seuil de Score TF-IDF",
            min_value=0.0,
            max_value=float(df['tfidf_score'].max()),
            value=0.0,
            step=0.01,
            help="Filtrer les projets dont le score TF-IDF est sup√©rieur √† ce seuil"
        )
        
        seuil_bert = st.sidebar.slider(
            "Seuil de Score BERT",
            min_value=float(df['bert_score'].min()),
            max_value=float(df['bert_score'].max()),
            value=float(df['bert_score'].min()),
            step=0.01,
            help="Filtrer les projets dont le score BERT est sup√©rieur √† ce seuil"
        )
        
        # Options d'analyse
        st.sidebar.subheader("Options d'Analyse")
        afficher_statistiques = st.sidebar.checkbox("Afficher les Statistiques D√©taill√©es", value=True)
        afficher_top = st.sidebar.checkbox("Afficher les Meilleures Correspondances", value=True)
        n_top_choisi = st.sidebar.selectbox("Nombre de Meilleures Correspondances", [5, 10, 15, 20], index=1)
        
        # Filtrer les donn√©es pour l'affichage principal
        df_filtre = df[
            (df['tfidf_score'] >= seuil_tfidf) & 
            (df['bert_score'] >= seuil_bert)
        ]
        
        # Indicateurs principaux
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Projets Totaux",
                f"{len(df_filtre):,}",
                delta=f"{len(df_filtre) - len(df):,}" if len(df_filtre) != len(df) else None
            )
        
        with col2:
            st.metric(
                "Moyenne TF-IDF",
                f"{df_filtre['tfidf_score'].mean():.4f}",
                delta=f"{(df_filtre['tfidf_score'].mean() - df['tfidf_score'].mean()):.4f}"
            )
        
        with col3:
            st.metric(
                "Moyenne BERT",
                f"{df_filtre['bert_score'].mean():.4f}",
                delta=f"{(df_filtre['bert_score'].mean() - df['bert_score'].mean()):.4f}"
            )
        
        with col4:
            correlation = df_filtre['tfidf_score'].corr(df_filtre['bert_score'])
            st.metric(
                "Corr√©lation des Scores",
                f"{correlation:.4f}",
                help="Corr√©lation de Pearson entre les scores TF-IDF et BERT"
            )
        
        # Visualisation principale
        st.header("üìä Distributions des Scores")
        fig, df_filtre_plot = creer_graphique_distribution(df_filtre, seuil_tfidf, seuil_bert)
        st.plotly_chart(fig, use_container_width=True)
        
        # Statistiques d√©taill√©es
        if afficher_statistiques:
            st.header("üìà Statistiques D√©taill√©es")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("Statistiques TF-IDF")
                stats_tfidf = df_filtre['tfidf_score'].describe()
                st.dataframe(stats_tfidf.to_frame().T, use_container_width=True)
                
            with col2:
                st.subheader("Statistiques BERT")
                stats_bert = df_filtre['bert_score'].describe()
                st.dataframe(stats_bert.to_frame().T, use_container_width=True)
        
        # Meilleures correspondances
        if afficher_top:
            st.header("üèÜ Meilleures Correspondances")
            
            top_tfidf, top_bert = creer_tableau_top(df_filtre, n_top_choisi)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("Top TF-IDF")
                st.dataframe(
                    top_tfidf[['rang', 'acronyme_anr', 'acronyme_cordis', 'tfidf_score', 'bert_score']],
                    column_config={
                        'rang': 'Rang',
                        'acronyme_anr': 'Projet ANR',
                        'acronyme_cordis': 'Projet CORDIS',
                        'tfidf_score': st.column_config.NumberColumn('Score TF-IDF', format="%.4f"),
                        'bert_score': st.column_config.NumberColumn('Score BERT', format="%.4f")
                    },
                    hide_index=True,
                    use_container_width=True
                )
            
            with col2:
                st.subheader("Top BERT")
                st.dataframe(
                    top_bert[['rang', 'acronyme_anr', 'acronyme_cordis', 'tfidf_score', 'bert_score']],
                    column_config={
                        'rang': 'Rang',
                        'acronyme_anr': 'Projet ANR',
                        'acronyme_cordis': 'Projet CORDIS',
                        'tfidf_score': st.column_config.NumberColumn('Score TF-IDF', format="%.4f"),
                        'bert_score': st.column_config.NumberColumn('Score BERT', format="%.4f")
                    },
                    hide_index=True,
                    use_container_width=True
                )
        
        # Comparaison des m√©thodes
        st.header("üîç Comparaison des M√©thodes")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            nb_tfidf_eleve = len(df_filtre[df_filtre['tfidf_score'] > 0.5])
            st.metric("Scores TF-IDF √âlev√©s (>0.5)", nb_tfidf_eleve)
        
        with col2:
            nb_bert_eleve = len(df_filtre[df_filtre['bert_score'] > 0.5])
            st.metric("Scores BERT √âlev√©s (>0.5)", nb_bert_eleve)
        
        with col3:
            nb_both_eleve = len(df_filtre[
                (df_filtre['tfidf_score'] > 0.5) & (df_filtre['bert_score'] > 0.5)
            ])
            st.metric("Scores √âlev√©s dans les Deux (>0.5)", nb_both_eleve)
        
        # Carte de chaleur de corr√©lation
        st.subheader("Analyse de Corr√©lation des Scores")
        
        matrice_corr = df_filtre[['tfidf_score', 'bert_score']].corr()
        
        fig_corr = px.imshow(
            matrice_corr,
            text_auto=True,
            aspect="auto",
            color_continuous_scale='RdBu_r',
            title="Matrice de Corr√©lation : TF-IDF vs BERT"
        )
        fig_corr.update_layout(height=400)
        st.plotly_chart(fig_corr, use_container_width=True)
        
        # Informations compl√©mentaires
        st.header("üí° Informations Cl√©s")
        
        insights = []
        total_projets = len(df_filtre)
        haute_agreement = len(df_filtre[
            (df_filtre['tfidf_score'] > 0.3) & (df_filtre['bert_score'] > 0.3)
        ])
        taux_agreement = (haute_agreement / total_projets * 100) if total_projets > 0 else 0
        
        insights.append(f"‚Ä¢ **Accord des M√©thodes** : {taux_agreement:.1f}% des paires de projets montrent une similarit√© √©lev√©e (>0.3) avec les deux m√©thodes")
        
        # M√©dianes pour comparer
        mediane_tfidf = df_filtre['tfidf_score'].median()
        mediane_bert = df_filtre['bert_score'].median()
        
        if mediane_tfidf > mediane_bert:
            insights.append(f"‚Ä¢ **Distribution des Scores** : Les scores TF-IDF ont tendance √† √™tre plus √©lev√©s (m√©diane : {mediane_tfidf:.4f}) compar√©s aux scores BERT (m√©diane : {mediane_bert:.4f})")
        else:
            insights.append(f"‚Ä¢ **Distribution des Scores** : Les scores BERT ont tendance √† √™tre plus √©lev√©s (m√©diane : {mediane_bert:.4f}) compar√©s aux scores TF-IDF (m√©diane : {mediane_tfidf:.4f})")
        
        # Insight sur la corr√©lation
        if correlation > 0.5:
            insights.append(f"‚Ä¢ **Fort niveau de Corr√©lation** : Les m√©thodes montrent une forte corr√©lation positive ({correlation:.3f}), indiquant une coh√©rence dans l'√©valuation")
        elif correlation > 0.3:
            insights.append(f"‚Ä¢ **Corr√©lation Mod√©r√©e** : Les m√©thodes montrent une corr√©lation mod√©r√©e ({correlation:.3f}), sugg√©rant une certaine coh√©rence mais aussi des perspectives compl√©mentaires")
        else:
            insights.append(f"‚Ä¢ **Faible Corr√©lation** : Les m√©thodes montrent une faible corr√©lation ({correlation:.3f}), indiquant qu'elles capturent diff√©rents aspects de similarit√©")
        
        for info in insights:
            st.markdown(info)
        
        # Export des donn√©es filtr√©es
        st.header("üíæ Export des Donn√©es")
        
        if st.button("T√©l√©charger les Donn√©es Filtr√©es au format CSV"):
            csv = df_filtre.to_csv(index=False)
            st.download_button(
                label="T√©l√©charger le CSV",
                data=csv,
                file_name=f"donnees_filtrees_{len(df_filtre)}_projets.csv",
                mime="text/csv"
            )

    # -------------------------------------------------------------------
    # ONGLET 2 : CHAT & COMPARAISON DE R√âSUM√âS
    # -------------------------------------------------------------------

    with onglet2:
        st.subheader("üìä Base Compl√®te de Donn√©es")
        st.write("Affichage de toutes les lignes et colonnes du DataFrame original.")
        
        # Afficher la base compl√®te
        st.dataframe(df_filtre, use_container_width=True)
        
        
        # Bouton pour t√©l√©charger le CSV complet
        csv_complet = df.to_csv(index=False).encode("utf-8")
        st.download_button(
            label="T√©l√©charger le CSV complet",
            data=csv_complet,
            file_name="cordis_full_dataset.csv",
            mime="text/csv"
    )
    
    with onglet3:
        st.title("üí¨ Chat et Comparaison de R√©sum√©s")
        st.markdown("""
        Dans cet onglet, vous pouvez fournir deux r√©sum√©s et demander √† l'assistant OpenAI 
        de les comparer. Un pr√©-prompt d√©finit le r√¥le de l'assistant pour effectuer une 
        comparaison d√©taill√©e : similitudes, diff√©rences et qualit√© de chaque r√©sum√©.
        """)
        
        # Chargement de la cl√© API OpenAI depuis st.secrets, sinon variable d'environnement
        openai.api_key = st.secrets.get("openai_api_key", "")
        
        # Pr√©-prompt pour l'assistant
        pre_prompt = (
        "Vous √™tes un assistant dont la seule t√¢che est de comparer deux r√©sum√©s \
        et de retourner exactement **Similaires** ou **Diff√©rents**. "
        "Si le contenu des deux r√©sum√©s est essentiellement le m√™me (m√™mes id√©es, m√™mes points cl√©s), "
        "r√©pondez strictement par ¬´ Similaires ¬ª. Sinon, r√©pondez strictement par ¬´ Diff√©rents ¬ª. "
        "Aucun mot suppl√©mentaire, aucune explication."
    )
        
        # Champs de texte pour les deux r√©sum√©s
        resume1 = st.text_area("R√©sum√© 1", height=200, placeholder="Collez le premier r√©sum√© ici...")
        resume2 = st.text_area("R√©sum√© 2", height=200, placeholder="Collez le deuxi√®me r√©sum√© ici...")
        
        # Bouton pour lancer la comparaison
        if st.button("Comparer les R√©sum√©s"):
            if not resume1.strip() or not resume2.strip():
                st.error("Veuillez remplir les deux champs de r√©sum√© avant de comparer.")
            else:
                # Construction des messages pour l'API OpenAI
                messages = [
                    {"role": "system", "content": pre_prompt},
                    {"role": "user", "content": f"Voici le premier r√©sum√© :\n\n{resume1}"},
                    {"role": "user", "content": f"Voici le deuxi√®me r√©sum√© :\n\n{resume2}"}
                ]
                
                # Appel √† l'API ChatCompletion
                try:
                    with st.spinner("Analyse en cours, veuillez patienter..."):
                        response = openai.ChatCompletion.create(
                            model="gpt-4o-mini",  # Modifier si n√©cessaire
                            messages=messages,
                            temperature=0.7,
                            max_tokens=800
                        )
                    reponse_assistant = response.choices[0].message.content
                    st.subheader("R√©sultat de la Comparaison")
                    st.markdown(reponse_assistant)
                except Exception as e:
                    st.error(f"Erreur lors de l'appel √† l'API OpenAI : {e}")

if __name__ == "__main__":
    main()
